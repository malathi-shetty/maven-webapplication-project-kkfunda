/* Task: implement a conditional deployment:

If someone approves, deploy the WAR to Tomcat.

If someone rejects, cancel deployment.
*/

pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: "maven-3.9.6"
        WAR_FILE = "${env.WORKSPACE}/target/maven-web-application.war"
    }


    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'development', url: 'https://github.com/malathi-shetty/maven-webapplication-project-kkfunda.git'
                echo "Git branch: ${env.BRANCH_NAME}"
            }
        }

        stage('Maven Compile & Build') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean compile"
                sh "${MAVEN_HOME}/bin/mvn clean package"
            }
        }

        stage('SonarQube Report') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
            }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean deploy"
            }
        }

        stage('Deployment Approval to Tomcat') {
    steps {
        script {
            def deployDecision = input(
                id: 'DeploymentApproval',
                message: 'Approve deployment to Tomcat?',
                parameters: [
                    [$class: 'ChoiceParameterDefinition', choices: 'Approve\nReject', name: 'DEPLOY_DECISION']
                ]
            )

            if (deployDecision == 'Approve') {
                echo "Deployment Approved ‚úÖ"
                currentBuild.description = "Deployment Approved ‚úÖ"
                notifyDeployment("Deployment Approved & completed ‚úÖ", '#0000FF')
                
                // Slack notification with Blue color
                slackSend(color: '#0000FF', message: "Deployment approved & completed ‚úÖ", channel: '#jio-devteamlearning')

                if (!fileExists(WAR_FILE)) {
                    error("WAR file not found: ${WAR_FILE}")
                }

                sh """
                curl -u kk:password --upload-file ${WAR_FILE} \
                "http://65.0.61.29:8080/manager/text/deploy?path=/maven-web-application&update=true"
                """

            } else {
                echo "Deployment Rejected ‚ùå"
                currentBuild.description = "Deployment Rejected ‚ùå"
                notifyDeployment("Deployment rejected by user ‚ùå", '#800080')

                // Slack notification with Purple color
                slackSend(color: '#800080', message: "Deployment rejected by user ‚ùå", channel: '#jio-devteamlearning')
                error("Deployment rejected by user") // stops pipeline
            }
        }
    }
}

    }

    post {
        always {
            script {
                def status = currentBuild.currentResult
               notifyBuild(status)  // overall build status notification
                
            }
        }
    }
}

// üîπ Slack Notification Function
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'

// Build the subject & summary
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"

    // Set Slack color based on status
     def colorCode = '#FFFF00'  // default yellow
 if (buildStatus == 'SUCCESS') colorCode = '#00FF00'
    else if (buildStatus == 'FAILURE') colorCode = '#FF0000'
    else if (buildStatus == 'ABORTED') colorCode = '#FFA500'
    else if (buildStatus == 'STARTED') colorCode = '#FFFF00' // yellow

    def message = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    slackSend(color: colorCode, message: message, channel: '#jio-devteamlearning')

}

def notifyDeployment(String message, String colorHex) 
    {
    slackSend(color: colorHex, message: summary, channel: '#jio-devteamlearning')
}





 
