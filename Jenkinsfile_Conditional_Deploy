/* 
Task: Implement a conditional deployment

If someone approves ‚Üí deploy the WAR to Tomcat.  
If someone rejects ‚Üí cancel the deployment.
*/

pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: "maven-3.9.6"
        WAR_FILE = "${env.WORKSPACE}/target/maven-web-application.war"
    }

    stages {

        stage('Notify Build Started') {
            steps {
                script {
                    notifyBuild('STARTED')  // Pipeline start
                }
            }
        }

        stage('Git Checkout') {
            steps {
                git branch: 'development', url: 'https://github.com/malathi-shetty/maven-webapplication-project-kkfunda.git'
                echo "Git branch: ${env.BRANCH_NAME}"
                notifyStage("Git Checkout completed, moving to Maven Build")
            }
        }

        stage('Maven Compile & Build') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean compile"
                sh "${MAVEN_HOME}/bin/mvn clean package"
                notifyStage("Maven Compile & Package completed, moving to SonarQube Analysis")
            }
        }

        stage('SonarQube Report') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
                notifyStage("SonarQube analysis completed, moving to Nexus upload")
            }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean deploy"
                notifyStage("Artifact uploaded to Nexus, moving to Deployment Approval")
            }
        }

        stage('Deployment Approval to Tomcat') {
            steps {
                script {
                    // üü´ Slack for waiting (after Nexus, just before input)
                    notifyDeployment("üü´ Waiting for manual approval ‚è∏Ô∏è", 'WAITING')

                    def deployDecision = input(
                        id: 'DeploymentApproval',
                        message: 'Do you approve deployment to Tomcat?',
                        ok: 'Proceed',
                        submitter: 'malathi', // optional: restrict approval
                        parameters: [
                            [$class: 'ChoiceParameterDefinition', choices: 'Approve\nReject', name: 'DEPLOY_DECISION']
                        ]
                    )

                    if (deployDecision == 'Approve') {
                        echo "Deployment Approved ‚úÖ"
                        currentBuild.description = "Deployment Approved ‚úÖ"
                        notifyDeployment("üîµ Deployment approved & started ‚úÖ", 'APPROVED')

                        if (!fileExists(WAR_FILE)) {
                            error("WAR file not found: ${WAR_FILE}")
                        }

                        sh """
                        curl -u kk:password --upload-file ${WAR_FILE} \
                        "http://65.0.61.29:8080/manager/text/deploy?path=/maven-web-application&update=true"
                        """
                    } else {
                        echo "Deployment Rejected ‚ùå"
                        currentBuild.description = "Deployment Rejected ‚ùå"
                        notifyDeployment("üü£ Deployment rejected by user ‚ùå", 'REJECTED')
                        error("Deployment rejected by user") // stops pipeline
                    }
                }
            }
        }

    }

    post {
        always {
            script {
                def status = currentBuild.currentResult
                notifyBuild(status)  // final build status
            }
        }
    }
}

// üîπ Build Slack Notification Function
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'
    def colorCode = '#FFD700'  // default yellow for STARTED

    if (buildStatus == 'SUCCESS') colorCode = '#00FF00'   // green
    else if (buildStatus == 'FAILURE') colorCode = '#FF0000'   // red
    else if (buildStatus == 'ABORTED') colorCode = '#FF8C00'   // dark orange
    else if (buildStatus == 'STARTED') colorCode = '#FFD700'   // yellow

    def summary = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    slackSend(color: colorCode, message: summary, channel: '#jio-devteamlearning')
}

// üîπ Stage Slack Notification Function
def notifyStage(String message) {
    // stage progress messages ‚Üí neutral color, teal-like
    slackSend(color: '#4682B4', message: message, channel: '#jio-devteamlearning')
}

// üîπ Deployment Notification Function
def notifyDeployment(String message, String type) {
    def colorHex = '#1E90FF' // üîµ approved
    if (type == 'REJECTED') colorHex = '#800080' // üü£ rejected
    else if (type == 'WAITING') colorHex = '#654321' // üü´ dark brown
    slackSend(color: colorHex, message: message, channel: '#jio-devteamlearning')
}
