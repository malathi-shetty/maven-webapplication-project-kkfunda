/* 
Task: Implement a conditional deployment

If someone approves → deploy the WAR to Tomcat.  
If someone rejects → cancel the deployment.
*/

pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: "maven-3.9.6"
        WAR_FILE = "${env.WORKSPACE}/target/maven-web-application.war"
    }

    stages {

        // 🟡 Stage 1: Notify Start
        stage('Notify Build Started') {
            steps {
                script {
                    notifyBuild('STARTED')  // Send Slack message immediately
                }
            }
        }

        // 🧩 Stage 2: Git Checkout
        stage('Git Checkout') {
            steps {
                git branch: 'development', url: 'https://github.com/malathi-shetty/maven-webapplication-project-kkfunda.git'
                echo "Git branch: ${env.BRANCH_NAME}"
            }
        }

        // ⚙️ Stage 3: Maven Compile & Build
        stage('Maven Compile & Build') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean compile"
                sh "${MAVEN_HOME}/bin/mvn clean package"
            }
        }

        // 🧠 Stage 4: SonarQube Analysis
        stage('SonarQube Report') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
            }
        }

        // 📦 Stage 5: Upload to Nexus
        stage('Upload Artifact to Nexus') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean deploy"
            }
        }

        // 🚦 Stage 6: Deployment Approval
        stage('Deployment Approval to Tomcat') {
            steps {
                script {
                    // 🟫 Notify waiting for approval
                    notifyDeployment("🟫 Waiting for manual approval ⏸️", 'WAITING')

                    // Popup for approval/rejection
                    def deployDecision = input(
                        id: 'DeploymentApproval',
                        message: 'Do you approve deployment to Tomcat?',
                        ok: 'Proceed',
                        submitter: 'malathi', // optional: restrict approval
                        parameters: [
                            [$class: 'ChoiceParameterDefinition', choices: 'Approve\nReject', name: 'DEPLOY_DECISION']
                        ]
                    )

                    if (deployDecision == 'Approve') {
                        echo "Deployment Approved ✅"
                        currentBuild.description = "Deployment Approved ✅"
                        notifyDeployment("🔵 Deployment approved & started ✅", 'APPROVED')

                        if (!fileExists(WAR_FILE)) {
                            error("WAR file not found: ${WAR_FILE}")
                        }

                        // Deploy to Tomcat
                        sh """
                        curl -u kk:password --upload-file ${WAR_FILE} \
                        "http://65.0.61.29:8080/manager/text/deploy?path=/maven-web-application&update=true"
                        """

                    } else {
                        echo "Deployment Rejected ❌"
                        currentBuild.description = "Deployment Rejected ❌"
                        notifyDeployment("🟣 Deployment rejected by user ❌", 'REJECTED')
                        error("Deployment rejected by user") // stops pipeline
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.currentResult
                notifyBuild(status)  // Send final build status
            }
        }
    }
}

// 🔹 Build Slack Notification Function
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'
    def colorCode = '#FFD700'  // 🟡 default yellow for STARTED

    if (buildStatus == 'SUCCESS') colorCode = '#00FF00'   // 🟩 green
    else if (buildStatus == 'FAILURE') colorCode = '#FF0000'   // 🟥 red
    else if (buildStatus == 'ABORTED') colorCode = '#FFA500'   // 🟧 orange
    else if (buildStatus == 'STARTED') colorCode = '#FFD700'   // 🟡 gold

    def summary = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    slackSend(color: colorCode, message: summary, channel: '#jio-devteamlearning')
}

// 🔹 Deployment Notification Function
def notifyDeployment(String message, String type) {
    def colorHex = '#1E90FF' // 🔵 blue for approved
    if (type == 'REJECTED') colorHex = '#800080' // 🟣 purple
    else if (type == 'WAITING') colorHex = '#DAA520' // 🟫 goldenrod
    slackSend(color: colorHex, message: message, channel: '#jio-devteamlearning')
}
