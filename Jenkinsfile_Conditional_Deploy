// Today’s task: Add automatic triggers in Groovy script so the build runs automatically without manual start.
pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: "maven-3.9.6"
        WAR_FILE = "${env.WORKSPACE}/target/maven-web-application.war"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'development', url: 'https://github.com/malathi-shetty/maven-webapplication-project-kkfunda.git'
                echo "Git branch: ${env.BRANCH_NAME}"
            }
        }

        stage('Maven Compile & Build') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean compile"
                sh "${MAVEN_HOME}/bin/mvn clean package"
            }
        }

        stage('SonarQube Report') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
            }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean deploy"
            }
        }

        stage('Deployment Approval to Tomcat') {
            steps {
                script {
                    def deployDecision = input(
                        id: 'DeploymentApproval',
                        message: 'Approve deployment to Tomcat?',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition', choices: 'Approve\nReject', name: 'DEPLOY_DECISION']
                        ]
                    )

                    if (deployDecision == 'Approve') {
                        echo "Deployment Approved"
                        currentBuild.description = "Deployment Approved ✅"

                        if (!fileExists(WAR_FILE)) {
                            error("WAR file not found: ${WAR_FILE}")
                        }

                        sh """
                        curl -u kk:password --upload-file ${WAR_FILE} \
                        "http://65.0.61.29:8080/manager/text/deploy?path=/maven-web-application&update=true"
                        """

                        slackSend(color: '#00FF00', message: "Deployment approved & completed ✅", channel: '#jio-devteamlearning')

                    } else {
                        echo "Deployment Rejected"
                        currentBuild.description = "Deployment Rejected ❌"
                        slackSend(color: '#FF0000', message: "Deployment rejected by user ❌", channel: '#jio-devteamlearning')
                        error("Deployment rejected by user") // stops pipeline
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.currentResult
                def colorHex = '#FFFF00' // default yellow
                if (status == 'SUCCESS') colorHex = '#00FF00'
                else if (status == 'FAILURE') colorHex = '#FF0000'
                else if (status == 'ABORTED') colorHex = '#FFA500'

                slackSend(
                    color: colorHex,
                    message: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
                    channel: '#jio-devteamlearning'
                )
            }
        }
    }
}

