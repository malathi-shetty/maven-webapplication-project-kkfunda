/* 
Task: Implement a conditional deployment

If someone approves ‚Üí deploy the WAR to Tomcat.  
If someone rejects ‚Üí cancel the deployment.
*/

pipeline {
    agent any

    environment {
        MAVEN_HOME = tool name: "maven-3.9.6"
        WAR_FILE = "${env.WORKSPACE}/target/maven-web-application.war"
    }

    stages {

        stage('Notify Build Started') {
            steps {
                script {
                    currentBuild.description = "Build Started ‚è≥"
                    notifyStage("Build Started")
                }
            }
        }

        stage('Git Checkout') {
            steps {
                script { notifyStage("Git Checkout Started") }
                git branch: 'development', url: 'https://github.com/malathi-shetty/maven-webapplication-project-kkfunda.git'
                echo "Git branch: ${env.BRANCH_NAME}"
                notifyStage("Git Checkout Completed ‚úÖ")
            }
        }

        stage('Maven Compile & Build') {
            steps {
                script { notifyStage("Maven Compile Started") }
                sh "${MAVEN_HOME}/bin/mvn clean compile"
                notifyStage("Maven Compile Completed ‚úÖ")

                script { notifyStage("Maven Package Started") }
                sh "${MAVEN_HOME}/bin/mvn clean package"
                notifyStage("Maven Package Completed ‚úÖ")
            }
        }

        stage('SonarQube Report') {
            steps {
                script { notifyStage("SonarQube Analysis Started") }
                sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
                notifyStage("SonarQube Analysis Completed ‚úÖ")
            }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                script { notifyStage("Artifact Upload to Nexus Started") }
                sh "${MAVEN_HOME}/bin/mvn clean deploy"
                notifyStage("Artifact Uploaded to Nexus ‚úÖ")
            }
        }

        stage('Deployment Approval to Tomcat') {
            steps {
                script {
                    // Waiting notification
                    currentBuild.description = "Deployment Approval Pending ‚è∏Ô∏è"
                    notifyDeployment("Waiting for deployment approval ‚è∏Ô∏è", "WAITING")

                    // Popup approval
                    def deployDecision = input(
                        id: 'DeploymentApproval', 
                        message: 'Do you approve deployment to Tomcat?', 
                        ok: 'Deploy',
                        submitter: 'malathi',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition', choices: 'Approve\nReject', name: 'DEPLOY_DECISION']
                        ]
                    )

                    if (deployDecision == 'Approve') {
                        echo "Deployment Approved ‚úÖ"
                        currentBuild.description = "Deployment Approved ‚úÖ"
                        notifyDeployment("Deployment approved & completed ‚úÖ", "APPROVED")

                        if (!fileExists(WAR_FILE)) {
                            error("WAR file not found: ${WAR_FILE}")
                        }

                        sh """
                        curl -u kk:password --upload-file ${WAR_FILE} \
                        "http://65.0.61.29:8080/manager/text/deploy?path=/maven-web-application&update=true"
                        """
                        notifyStage("Deployment to Tomcat Completed ‚úÖ")
                    } else {
                        echo "Deployment Rejected ‚ùå"
                        currentBuild.description = "Deployment Rejected ‚ùå"
                        notifyDeployment("Deployment rejected by user ‚ùå", "REJECTED")
                        error("Deployment rejected by user")
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.currentResult
                if (status == 'ABORTED') {
                    currentBuild.description = "Build Aborted ‚ö†Ô∏è"
                    notifyDeployment("Build Aborted ‚ö†Ô∏è", "ABORTED")
                }
                notifyBuild(status)
            }
        }
    }
}

// üîπ Slack Notification for Overall Build Status
def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'
    def colorCode = '#FFD700'  // Yellow default

    if (buildStatus == 'SUCCESS') colorCode = '#00FF00'
    else if (buildStatus == 'FAILURE') colorCode = '#FF0000'
    else if (buildStatus == 'ABORTED') colorCode = '#FF8C00'
    else if (buildStatus == 'STARTED') colorCode = '#FFD700'

    def message = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    slackSend(color: colorCode, message: message, channel: '#jio-devteamlearning')
}

// üîπ Slack Notification for Each Stage
def notifyStage(String stageMessage) {
    def colorHex = '#FFD700' // Yellow
    slackSend(color: colorHex, message: "Stage Update: ${stageMessage}", channel: '#jio-devteamlearning')
}

// üîπ Slack Notification for Deployment Approval/Result
def notifyDeployment(String message, String type) {
    def colorHex = '#8B4513' // Dark Brown for waiting
    if (type == 'APPROVED') colorHex = '#1E90FF'   // Blue
    else if (type == 'REJECTED') colorHex = '#800080' // Purple
    else if (type == 'ABORTED') colorHex = '#FF8C00'  // Dark Orange

    slackSend(color: colorHex, message: message, channel: '#jio-devteamlearning')
}
