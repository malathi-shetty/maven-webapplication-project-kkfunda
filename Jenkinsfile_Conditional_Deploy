// Todayâ€™s task: Add automatic triggers in Groovy script so the build runs automatically without manual start.
node {

  echo "git branch name: ${env.BRANCH_NAME}"
  echo "build number is: ${env.BUILD_NUMBER}"
  echo "node name is: ${env.NODE_NAME}"

  def mavenHome = tool name: "maven-3.9.6"

  try {

    stage('Git Checkout') {
      notifyBuild('STARTED')
      git branch: 'development', url: 'https://github.com/malathi-shetty/maven-webapplication-project-kkfunda.git'
    }

    stage('Maven Compile') {
      sh "${mavenHome}/bin/mvn clean compile"
    }

    stage('Maven Build') {
      sh "${mavenHome}/bin/mvn clean package"
    }

    stage('SonarQube Report') {
      sh "${mavenHome}/bin/mvn sonar:sonar"
    }

    stage('Upload Artifact') {
      sh "${mavenHome}/bin/mvn clean deploy"
    }

    stage('Deploy - Approval/Reject to Tomcat') {
       // Ask for approval before deploying
            def userInput = input(
                id: 'ApproveDeployment', message: 'Approve deployment to Tomcat?', parameters: [
                    [$class: 'ChoiceParameterDefinition', choices: "Approve\nReject", name: 'DEPLOY_DECISION']
                ]
            )

            if (userInput == 'Approve') {
                echo "Deployment approved. Deploying WAR to Tomcat..."
                
                def warFile = "${env.WORKSPACE}/target/maven-web-application.war"
                if (!fileExists(warFile)) {
                    error("WAR file not found: ${warFile}")
                }

                sh """
                curl -u kk:password --upload-file ${warFile} \
                "http://65.0.61.29:8080/manager/text/deploy?path=/maven-web-application&update=true"
                """
            } else {
                echo "Deployment rejected. Skipping deployment."
            }
    }

  } catch (e) {
    currentBuild.result = "FAILED"
  } finally {
    notifyBuild(currentBuild.result)
  }

} // node ending


// ðŸ”¹ Slack Notification Function
def notifyBuild(String buildStatus = 'STARTED') {
  buildStatus = buildStatus ?: 'SUCCESS'

  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  if (buildStatus == 'STARTED') {
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    colorCode = '#00FF00'
  }

  slackSend(color: colorCode, message: summary, channel: '#jio-devteamlearning')
}
