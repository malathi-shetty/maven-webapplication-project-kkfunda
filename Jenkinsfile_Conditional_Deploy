// Today‚Äôs task: Add automatic triggers in Groovy script so the build runs automatically without manual start.
pipeline {
    agent any


  // echo "git branch name: ${env.BRANCH_NAME}"
  echo "build number is: ${env.BUILD_NUMBER}"
  echo "node name is: ${env.NODE_NAME}"

  def mavenHome = tool name: "maven-3.9.6"

  try {

    stage('Git Checkout') {
      notifyBuild('STARTED')
      git branch: 'development', url: 'https://github.com/malathi-shetty/maven-webapplication-project-kkfunda.git'
      echo "Git branch: ${env.BRANCH_NAME}"
    }

    stage('Maven Compile & Build') {
       sh "${MAVEN_HOME}/bin/mvn clean compile"
       sh "${MAVEN_HOME}/bin/mvn clean package"
    }

    stage('SonarQube Report') {
      sh "${mavenHome}/bin/mvn sonar:sonar"
    }

    stage('Upload Artifact to Nexus') {
      sh "${mavenHome}/bin/mvn clean deploy"
    }

    stage('Deployment Approval to Tomcat') {
       // Ask for approval before deploying
           steps {
                script {
                    def deployDecision = input(
                        id: 'DeploymentApproval',
                        message: 'Approve deployment to Tomcat?',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition', choices: 'Approve\nReject', name: 'DEPLOY_DECISION']
                        ]
                    )

                    if (deployDecision == 'Approve') {
                        echo "Deployment Approved"
                        currentBuild.description = "Deployment Approved ‚úÖ"
                        
                        if (!fileExists(WAR_FILE)) {
                            error("WAR file not found: ${WAR_FILE}")
                        }

                        sh """
                        curl -u kk:password --upload-file ${WAR_FILE} \
                        "http://65.0.61.29:8080/manager/text/deploy?path=/maven-web-application&update=true"
                        """
                        // Slack notification for approved deployment
                        slackSend(color: '#00FF00', message: "Deployment approved & completed successfully ‚úÖ", channel: '#jio-devteamlearning')

                    } else {
                        echo "Deployment Rejected"
                        currentBuild.description = "Deployment Rejected ‚ùå"
                        // Slack notification for rejected deployment
                        slackSend(color: '#FF0000', message: "Deployment rejected by user ‚ùå", channel: '#jio-devteamlearning')
                        error("Deployment rejected by user") // Marks build as failed or aborted
                    }
                }
            }
        }
    }

  } catch (e) {
    currentBuild.result = "FAILED"
  } finally {
    notifyBuild(currentBuild.result)
  }


post {
        always {
script {
// üîπ Slack Notification Function
def notifyBuild(String buildStatus = 'STARTED') {
  buildStatus = buildStatus ?: 'SUCCESS'

  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  if (buildStatus == 'STARTED') {
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    colorCode = '#00FF00'
  }

 def status = currentBuild.currentResult
                def colorHex = '#FFFF00' // default: yellow

                
                if (status == 'SUCCESS') colorHex = '#00FF00'
                else if (status == 'FAILURE') colorHex = '#FF0000'
                else if (status == 'ABORTED') colorHex = '#FFA500'

                slackSend(color: colorHex, message: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: '#jio-devteamlearning')
            }
        }
    }
